[{"model": "blog.blogcategory", "pk": 1, "fields": {"created_at": "2025-05-25T21:05:49.980Z", "updated_at": "2025-05-25T21:05:49.980Z", "name": "Corrison", "slug": "corrison", "description": ""}}, {"model": "blog.blogpost", "pk": 1, "fields": {"created_at": "2025-05-25T21:08:47.621Z", "updated_at": "2025-05-25T21:10:11.012Z", "title": "Welcome To Corrison", "slug": "welcome-to-corrison", "category": 1, "status": "published", "is_featured": true, "published_at": "2025-05-25T21:05:58Z", "content": "<p>Building a multi-functional platform that can be deployed across multiple domains while maintaining code consistency is a challenge I set for myself and achieved. I am excited to introduce Corrison, a &nbsp;Django-based &nbsp; platform designed specifically with reusability and tailoring in mind.</p>\r\n<p><br>In my experience developing eCommerce solutions and websites, I repeatedly encountered the same challenge: clients wanted similar functionality but with unique branding.</p>\r\n<p><br>The traditional approach of creating separate codebases for each project was time consuming. &nbsp;I went in search of a faster, more sustainable way. This led to the development of Corrison. A &nbsp;platform that provides enterprise-level functionality while remaining flexible enough to adapt to different business needs.</p>\r\n<p><br>Corrison is designed to be fully headless and modular.&nbsp;</p>\r\n<p><br>Corrison has been created using a headless, API approach. One site. Many uses. It uses a Django-based API that serves content (blog posts, products, pages) to any front‐end. Right now, I am using the Astro framework as the frontend.<br>It includes a CMS backend built with Django and Django REST Framework, powering multiple websites with a shared API infrastructure.&nbsp;</p>\r\n<p><br>You can:&nbsp;<br>Use only the blog endpoints for a standalone CMS blog.<br>Use the store endpoints to power a headless shop.<br>Use the pages endpoints for dynamic landing pages.<br>Use LinkHub to create link-in-bio style pages.<br>Mix and match; your existing Django site can fetch from Corrison's API without rewriting all your templates.<br>&nbsp;<br><strong>Architecture - Key Design Principles</strong></p>\r\n<p><br><strong>Service-Oriented Architecture</strong></p>\r\n<p><br>At its core, Corrison separates business logic from presentation through a comprehensive service layer. This means:<br>Cleaner Code: Views remain thin and focused on presentation.<br>Reusability: Business logic can be shared across different views and contexts<br>Testability: Services can be tested independently of the web framework<br>Maintainability: Changes to business rules don't require modifications to views</p>\r\n<p><strong>Modular Architecture</strong></p>\r\n<p><br>Corrison has been arranged into focused Django apps, each responsible for specific functionality:<br>corrison/<br>├── accounts/ &nbsp; &nbsp;# User management<br>├── cart/ &nbsp; &nbsp; &nbsp; &nbsp;# Shopping cart functionality<br>├── checkout/ &nbsp; &nbsp;# Order processing and payments<br>├── products/ &nbsp; &nbsp;# Product catalog<br>├── blog/ &nbsp; &nbsp; &nbsp; &nbsp;# Content management<br>├── Pages/ &nbsp; &nbsp; &nbsp; &nbsp;# Build websites and landing pages<br>├── LinkHub/ &nbsp; &nbsp; &nbsp; &nbsp;# Display links to your content around the web<br>├── Events/ &nbsp; &nbsp; &nbsp; &nbsp;# Coming soon - set up and manage events<br>├── Calendar/ &nbsp; &nbsp; &nbsp; &nbsp;# Coming soon - let your clients book appointments</p>\r\n<p><br><strong>Multi-Domain Deployment</strong></p>\r\n<p><br>Corrison uses a sophisticated settings structure that makes deployment across different environments seamless:</p>\r\n<p><br><em>Base Settings: </em>Shared configuration across all environments<br><em>Environment-Specific:</em> Development, staging, and production settings<br><em>Site Settings: </em>Domain-specific configuration for multi-site deployment.</p>\r\n<p><br><strong>A Business Website Example</strong></p>\r\n<p><br>Let's use a made-up example to demonstrate. Your website is at potteryplace.com.&nbsp;<br>Need a different UK and USA site? Create your site once, set it up on different domains.&nbsp;<br>Need a promo page - &nbsp;promo.potteryplace.com - gives you one.&nbsp;<br>Need a documentation site docs.potterplace.com or a place to sell your pottery. Set up the ecommerce store.<br>International Markets<br>Easily adapt the platform for different regions:<br>Currency and language support<br>Region-specific product availability<br>Localised payment methods<br>Compliance with local regulations<br>You are using the same code on different domains.</p>\r\n<p><strong>Headless API Structure</strong><br>Corrison has been created using a headless, API approach. One site. Many uses. It uses a Django-based API that serves content (blog posts, products, pages) to any front‐end. Right now, I am using the Astro framework as the frontend.<br>It includes a CMS backend built with Django and Django REST Framework, powering multiple websites with a shared API infrastructure.&nbsp;</p>\r\n<p><strong>Single API Endpoint</strong><br>Corrison uses a Single API endpoint. I deploy the Django app once (e.g. at corrison.yourdomain.com), and it exposes REST or GraphQL endpoints like:<br>GET /posts/<br>GET /products/<br>GET /pages/</p>\r\n<p>The front-end then fetches the data.Any front‐end, whether it&rsquo;s Astro, React, Vue, Gatsby, Next.js, a mobile app, or even another Django instance. Your front-end framework simply calls those endpoints, receives JSON, and renders it however it likes.</p>\r\n<p><strong>Astro Front-End</strong><br>I create an Astro project and use Astro&rsquo;s getStaticPaths/ getStaticProps to fetch data from the Django API. All your content and information is stored in the Django backend. The front-end displays it all.<br>Deploy that Astro site to your hosting with Railway, cpanel, Vercel or whoever.&nbsp;</p>\r\n<p><strong>CORS &amp; Authentication</strong><br>With a plug-and-play system like this one does that mean anyone can set up a site using my domain name?&nbsp;</p>\r\n<p>NO! And I'll tell you for why...</p>\r\n<p>The site has the ability to enable CORS on the API so that requests from domain-a.com, domain-b.com, etc. are allowed.<br>API keys or OAuth tokens are issued so that each front‐end or client registers and authenticates when it asks for data.<br>So if a domain is not registered with your site it can't get access to your information.</p>\r\n<p><strong>SEO tips to &ldquo;unify&rdquo; the sites</strong></p>\r\n<p>You might think that having all these different sites will affect your SEO but there is a way to make sure that does not happen.<br>A central hub (potteryplace.com) links prominently to each sub-domain.<br>Cross-linking: In the Footer or Navigation bar of each sub-domain I point back to the central hub domain.<br>Shared branding: Use the same logo, meta tags, CSS so Google (and users) see them as part of one brand.</p>\r\n<p><strong>Sitemap &amp; Search Console:</strong><br>Create a root sitemap at potteryplace.com/sitemap.xml that references all sub-site sitemaps.<br>In Google Search Console, add the &ldquo;Domain Property&rdquo; (potteryplace.com) to cover all sub-domains automatically.<br>Use of canonical headers (if any content overlaps) so Google knows which URL you prefer indexed.</p>\r\n<p><strong>DEMO SITES</strong><br>You can visit these sites to get an idea of the different ways I build websites, blogs, eCommerce stores and more. All using one platform.</p>\r\n<p><br>https://www.todiane.com - using a one-page site for job hunting<br>https://corrisonapi.com - the main site<br>https://corrison.corrisonapi.com - the engine that makes this work - nothing to actually see because it is all backend.</p>", "featured_image": "blog/images/corrison-headless-api-blog.webp", "external_image_url": null, "youtube_url": "", "thumbnail": "", "attachment": "", "ad_type": "none", "ad_code": "", "ad_image": "", "ad_url": "", "meta_title": "", "meta_description": "", "meta_keywords": ""}}, {"model": "blog.blogpost", "pk": 2, "fields": {"created_at": "2025-06-01T08:49:25.241Z", "updated_at": "2025-06-01T08:49:25.241Z", "title": "draft", "slug": "draft", "category": 1, "status": "draft", "is_featured": false, "published_at": null, "content": "<p>this is draft</p>", "featured_image": "", "external_image_url": null, "youtube_url": "", "thumbnail": "", "attachment": "blog/attachments/diane-corriette-2025-cv_1.pdf", "ad_type": "none", "ad_code": "", "ad_image": "", "ad_url": "", "meta_title": "", "meta_description": "", "meta_keywords": ""}}]